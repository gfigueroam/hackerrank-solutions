import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'binarySearch' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY nums
     *  2. INTEGER target
     * Lookup with Binary Search
     * Given a sorted array of distinct integers and a target value, return the index of the target or -1 if not found.
     */

    public static int binarySearch(List<Integer> nums, int target) {
        if(nums.isEmpty())
            return -1;
            
        int low =0, high=nums.size(), middle = 0;
        
        while(low <= high &&  (middle =(low+high)/2) < nums.size()) {
            int value = nums.get(middle);
            
            if(value < target)
                low = middle+1;
            else if(value > target) 
                high = middle-1; 
            else
                return middle;
        }
        
        return -1;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int numsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> nums = IntStream.range(0, numsCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int target = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.binarySearch(nums, target);

        System.out.println(result);

        bufferedReader.close();
    }
}
