import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'countResponseTimeRegressions' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY responseTimes as parameter.
     */
     
     /*
      * Given an array of positive integers, return the number of elements that are strictly greater 
      * than the average of all previous elements. Skip the first element.
      *
      * Solution: using a prefix sum to have a sum all of the elements till the i.
      */

    public static int countResponseTimeRegressions(List<Integer> responseTimes) {
        //If no elements in the responseTimes
        if (responseTimes.isEmpty())
            return 0;
        
        //Insert the first item of the list, as the prefix sum will start from the second item.
        long[] prefixSum = new long[responseTimes.size()];
        prefixSum[0] = responseTimes.get(0);
        int count = 0;

        for (int i = 1; i < responseTimes.size(); i++) {
            // check if the average of the previous elements is smaller than the current 
            if ((double) prefixSum[i - 1] / i < responseTimes.get(i))
                count++;
            //for each element, calculate the prefix sum = previous sum + current 
            prefixSum[i] = prefixSum[i - 1] + responseTimes.get(i);
        }
        return count;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int responseTimesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> responseTimes = IntStream.range(0, responseTimesCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.countResponseTimeRegressions(responseTimes);

        System.out.println(result);

        bufferedReader.close();
    }
}
